name: Fetch and Process Remote SmartDNS Rules Separately

on:
  schedule:
    # 每天凌晨3点执行 (UTC时间，根据需要调整)
    - cron: '0 3 * * *'
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write # 允许 GITHUB_TOKEN 写入仓库内容 (推送提交)

jobs:
  fetch_and_process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出你自己的仓库，以便提交结果

      - name: Fetch and process rules
        id: process_rules
        run: |
          # 定义输入URL和它们对应的输出文件名
          declare -A RULE_SOURCES
          RULE_SOURCES["https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/proxy-list.txt"]="smartdns_proxy_rules.txt"
          RULE_SOURCES["https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/direct-list.txt"]="smartdns_direct_rules.txt"

          PROCESSED_OUTPUT_FILES=()
          DOMAIN_TO_FORCE_DIRECT_LOWERCASE="services.googleapis.cn" # 确保我们的目标是小写

          for url in "${!RULE_SOURCES[@]}"; do
            output_filename="${RULE_SOURCES[$url]}"
            tmp_processed_file="tmp_${output_filename}"
            tmp_debug_file_before_delete="tmp_debug_before_delete_${output_filename}"
            tmp_debug_file_after_delete="tmp_debug_after_delete_${output_filename}"

            echo "Processing: ${url}  -> ${output_filename}"

            # 初始下载和通用处理
            # 下载 -> 转行尾 -> 去full: -> 去regexp:
            # 注意：这里的空格修剪暂时移到后面，让 sed 自己处理
            if ! curl -fsSL "${url}" | \
                sed 's/\r$//' | \
                sed 's/^full://' | \
                grep -v '^regexp:' > "${tmp_processed_file}"; then
              echo "警告: 下载或初步处理 ${url} 失败。跳过此源。"
              rm -f "${tmp_processed_file}"
              continue
            fi
            
            # 复制一份用于调试，看看删除前是什么样子
            cp "${tmp_processed_file}" "${tmp_debug_file_before_delete}"

            # 特定文件处理
            if [ "${output_filename}" == "smartdns_proxy_rules.txt" ]; then
              echo "DEBUG PROXY: Attempting to remove '${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}' from '${tmp_processed_file}' using robust sed."
              # 使用 sed 进行更灵活的删除：
              # 1. 's/^[[:space:]]*//;s/[[:space:]]*$//' : 先去除行首尾标准空格
              # 2. 然后对于包含目标域名的行 (忽略大小写，且允许域名本身前后有更多非标准空格)，删除整行
              #    为了让 DOMAIN_TO_FORCE_DIRECT_LOWERCASE 中的 '.' 不被sed正则解释为任意字符，我们需要转义它。
              DOMAIN_SED_ESCAPED=$(echo "${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}" | sed 's/\./\\./g')
              
              # 创建一个临时文件来保存 sed 的结果
              sed_output_tmp="${tmp_processed_file}.sed_out"

              # sed 命令解释：
              # 1. `s/^[[:space:]]*//;s/[[:space:]]*$//`: 修剪标准空格
              # 2. `t next_command`: 如果上一个s命令有替换，则跳转到 :next_command (相当于对修剪后的行进行后续操作)
              # 3. `b`: 如果没有替换 (行本身就是修剪过的)，也继续
              # 4. `:next_command`
              # 5. `/${DOMAIN_SED_ESCAPED}/Id`: I表示忽略大小写匹配，d表示删除包含该模式的行。
              #    更稳妥的方式是分两步：先修剪所有行，再对修剪后的结果执行删除。
              
              # 方案A: 分步 sed (更清晰)
              mv "${tmp_processed_file}" "${tmp_processed_file}.orig"
              sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "${tmp_processed_file}.orig" > "${tmp_processed_file}" # 修剪
              rm "${tmp_processed_file}.orig"
              
              mv "${tmp_processed_file}" "${tmp_processed_file}.trimmed"
              sed "/${DOMAIN_SED_ESCAPED}/Id" "${tmp_processed_file}.trimmed" > "${tmp_processed_file}" # 删除
              rm "${tmp_processed_file}.trimmed"


              # 调试：检查删除后域名是否还存在
              cp "${tmp_processed_file}" "${tmp_debug_file_after_delete}"
              if grep -iF "${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}" "${tmp_processed_file}"; then
                echo "ERROR PROXY: '${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}' STILL FOUND after robust sed removal in '${tmp_processed_file}'."
                echo "DEBUG PROXY: Content of '${tmp_debug_file_before_delete}' (cat -vet, lines with domain):"
                grep -iF "${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}" "${tmp_debug_file_before_delete}" | cat -vet | head
                echo "DEBUG PROXY: Content of '${tmp_debug_file_after_delete}' (cat -vet, lines with domain):"
                grep -iF "${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}" "${tmp_debug_file_after_delete}" | cat -vet | head
              else
                echo "DEBUG PROXY: '${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}' successfully removed by robust sed from '${tmp_processed_file}'."
              fi
            fi

            if [ "${output_filename}" == "smartdns_direct_rules.txt" ]; then
              echo "Ensuring ${DOMAIN_TO_FORCE_DIRECT_LOWERCASE} is in ${tmp_processed_file} (for direct list)..."
              # 先修剪，再添加，避免添加带空格的域名
              mv "${tmp_processed_file}" "${tmp_processed_file}.orig"
              sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "${tmp_processed_file}.orig" > "${tmp_processed_file}"
              rm "${tmp_processed_file}.orig"
              
              echo "${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}" >> "${tmp_processed_file}"
              echo "DEBUG DIRECT: Appended '${DOMAIN_TO_FORCE_DIRECT_LOWERCASE}' to '${tmp_processed_file}'."
            fi
            
            # 清理空行并排序去重
            if [ -s "${tmp_processed_file}" ]; then
              mv "${tmp_processed_file}" "${tmp_processed_file}.presort"
              # 再次修剪并去除结果中的空行，然后排序去重
              sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "${tmp_processed_file}.presort" | grep -v '^$' | sort -u > "${output_filename}"
              rm "${tmp_processed_file}.presort"
              
              echo "处理后的规则已保存到 ${output_filename}"
              echo "${output_filename} 中的总行数: $(wc -l < ${output_filename})"
              PROCESSED_OUTPUT_FILES+=("${output_filename}")
            else
              echo "警告: ${tmp_processed_file} 在排序前为空。可能导致 ${output_filename} 为空或未更新。"
              # 如果希望即使是空的也创建文件
              # > "${output_filename}"
              # PROCESSED_OUTPUT_FILES+=("${output_filename}")
            fi

            rm -f "${tmp_processed_file}" "${tmp_debug_file_before_delete}" "${tmp_debug_file_after_delete}"
          done

          if [ ${#PROCESSED_OUTPUT_FILES[@]} -gt 0 ]; then
            echo "成功处理的文件: ${PROCESSED_OUTPUT_FILES[*]}"
            echo "FILES_TO_COMMIT_LIST=${PROCESSED_OUTPUT_FILES[*]}" >> $GITHUB_ENV
          else
            echo "没有文件被成功处理或更新。"
            echo "FILES_TO_COMMIT_LIST=" >> $GITHUB_ENV
          fi

      - name: Commit and push changes
        # ... (Commit and push changes job 不变，和之前一样)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -z "$FILES_TO_COMMIT_LIST" ]; then
            echo "上一步没有处理任何文件。无需提交。"
            exit 0
          fi

          IFS=' ' read -r -a files_to_stage <<< "$FILES_TO_COMMIT_LIST"
          echo "待检查暂存的文件: ${files_to_stage[*]}"
          
          added_any_file=false
          for file in "${files_to_stage[@]}"; do
            if [ -f "$file" ]; then
              git add "$file"
              echo "已将 $file 添加到暂存区。"
              added_any_file=true
            else
              echo "警告: 预期的文件 $file 未找到。跳过添加。"
            fi
          done

          if ! $added_any_file; then
            echo "没有文件实际被添加到暂存区。"
            exit 0
          fi
          
          if git diff --staged --quiet; then
            echo "暂存的文件中没有实际更改需要提交。"
          else
            changed_files_names=$(git diff --staged --name-only | tr '\n' ' ' | sed 's/ $//')
            echo "在以下文件中检测到更改: $changed_files_names. 正在提交..."
            git commit -m "Update SmartDNS rules (Automated): $changed_files_names"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
