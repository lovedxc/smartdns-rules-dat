name: Fetch and Process Remote SmartDNS Rules Separately

on:
  schedule:
    # 每天凌晨3点执行 (UTC时间，根据需要调整)
    - cron: '0 3 * * *'
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write # 允许 GITHUB_TOKEN 写入仓库内容 (推送提交)

jobs:
  fetch_and_process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch and process rules
        id: process_rules
        run: |
          declare -A RULE_SOURCES
          RULE_SOURCES["https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/proxy-list.txt"]="smartdns_proxy_rules.txt"
          RULE_SOURCES["https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/direct-list.txt"]="smartdns_direct_rules.txt"

          PROCESSED_OUTPUT_FILES=()
          DOMAIN_TO_MANAGE="services.googleapis.cn"
          # Для grep -E, точка в домене должна быть экранирована.
          # И мы хотим точное совпадение строки для этого домена.
          DOMAIN_TO_EXCLUDE_PATTERN="^$(echo ${DOMAIN_TO_MANAGE} | sed 's/\./\\./g')$" # -> ^services\.googleapis\.cn$

          echo "DEBUG: Domain to manage: '${DOMAIN_TO_MANAGE}'"
          echo "DEBUG: Exclusion pattern for proxy list grep -vE: '${DOMAIN_TO_EXCLUDE_PATTERN}'"


          for url in "${!RULE_SOURCES[@]}"; do
            output_filename="${RULE_SOURCES[$url]}"
            tmp_processed_file="tmp_final_processed_${output_filename}"

            echo "Processing: ${url}  -> ${output_filename}"

            # 根据输出文件名决定处理流程
            if [ "${output_filename}" == "smartdns_proxy_rules.txt" ]; then
              echo "DEBUG PROXY: Applying proxy-specific filtering: removing full:, regexp:, and ${DOMAIN_TO_MANAGE}"
              # 代理列表：下载 -> 转行尾 -> 修剪空格 -> 一次性 grep -vE 排除多个模式
              if ! curl -fsSL "${url}" | \
                  sed 's/\r$//' | \
                  sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | \
                  grep -vE "(^full:|^regexp:|${DOMAIN_TO_EXCLUDE_PATTERN})" > "${tmp_processed_file}"; then
                echo "警告: 下载或处理 ${url} (proxy-specific) 失败。跳过此源。"
                rm -f "${tmp_processed_file}"
                continue
              fi
              # 调试：检查域名是否真的被移除了
              echo "DEBUG PROXY: Checking if '${DOMAIN_TO_MANAGE}' is still in '${tmp_processed_file}' after grep -vE:"
              if grep -qF "${DOMAIN_TO_MANAGE}" "${tmp_processed_file}"; then
                  echo "ERROR PROXY: '${DOMAIN_TO_MANAGE}' IS STILL FOUND in '${tmp_processed_file}' after grep -vE!"
                  grep -F "${DOMAIN_TO_MANAGE}" "${tmp_processed_file}" | cat -vet | head -n 5
              else
                  echo "DEBUG PROXY: '${DOMAIN_TO_MANAGE}' NOT found in '${tmp_processed_file}' after grep -vE. (This is good)"
              fi

            else # smartdns_direct_rules.txt (或其他未来可能添加的列表)
              echo "DEBUG OTHER: Applying general filtering for ${output_filename}"
              # 直连列表：下载 -> 转行尾 -> 修剪空格 -> 去full: -> 去regexp:
              if ! curl -fsSL "${url}" | \
                  sed 's/\r$//' | \
                  sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | \
                  sed 's/^full://' | \
                  grep -v '^regexp:' > "${tmp_processed_file}"; then
                echo "警告: 下载或处理 ${url} 失败。跳过此源。"
                rm -f "${tmp_processed_file}"
                continue
              fi

              # 如果是直连列表，确保特定域名存在 (追加到临时文件)
              if [ "${output_filename}" == "smartdns_direct_rules.txt" ]; then
                echo "DEBUG DIRECT: Ensuring ${DOMAIN_TO_MANAGE} is in ${tmp_processed_file} (for direct list)..."
                echo "${DOMAIN_TO_MANAGE}" >> "${tmp_processed_file}"
                echo "DEBUG DIRECT: Appended '${DOMAIN_TO_MANAGE}' to '${tmp_processed_file}'."
              fi
            fi
            
            # 统一处理：排序去重并保存 (只对存在且非空的 tmp_processed_file 操作)
            if [ -f "${tmp_processed_file}" ] && [ -s "${tmp_processed_file}" ]; then
              sort -u "${tmp_processed_file}" > "${output_filename}"
              echo "处理后的规则已保存到 ${output_filename}"
              echo "${output_filename} 中的总行数: $(wc -l < ${output_filename})"
              PROCESSED_OUTPUT_FILES+=("${output_filename}")
            elif [ -f "${tmp_processed_file}" ]; then
              echo "警告: ${tmp_processed_file} 在排序前为空。 ${output_filename} 将为空。"
              > "${output_filename}" # 创建一个空的输出文件
              PROCESSED_OUTPUT_FILES+=("${output_filename}")
            else
              echo "警告: ${tmp_processed_file} 未创建。 ${output_filename} 不会更新。"
            fi

            rm -f "${tmp_processed_file}" # 清理最终的临时文件
          done

          if [ ${#PROCESSED_OUTPUT_FILES[@]} -gt 0 ]; then
            echo "成功处理的文件: ${PROCESSED_OUTPUT_FILES[*]}"
            echo "FILES_TO_COMMIT_LIST=${PROCESSED_OUTPUT_FILES[*]}" >> $GITHUB_ENV
          else
            echo "没有文件被成功处理或更新。"
            echo "FILES_TO_COMMIT_LIST=" >> $GITHUB_ENV
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ -z "$FILES_TO_COMMIT_LIST" ]; then
            echo "上一步没有处理任何文件。无需提交。"
            exit 0
          fi

          IFS=' ' read -r -a files_to_stage <<< "$FILES_TO_COMMIT_LIST"
          echo "待检查暂存的文件: ${files_to_stage[*]}"
          
          added_any_file=false
          for file in "${files_to_stage[@]}"; do
            if [ -f "$file" ]; then
              git add "$file"
              echo "已将 $file 添加到暂存区。"
              added_any_file=true
            else
              echo "警告: 预期的文件 $file 未找到。跳过添加。"
            fi
          done

          if ! $added_any_file; then
            echo "没有文件实际被添加到暂存区。"
            exit 0
          fi
          
          if git diff --staged --quiet; then
            echo "暂存的文件中没有实际更改需要提交。"
          else
            changed_files_names=$(git diff --staged --name-only | tr '\n' ' ' | sed 's/ $//')
            echo "在以下文件中检测到更改: $changed_files_names. 正在提交..."
            git commit -m "Update SmartDNS rules (Automated): $changed_files_names"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
